{
    "contents" : "#include <Rcpp.h>\n\nusing namespace Rcpp;\n\n#include <math.h>\n#include <assert.h>\n#include <stdio.h>\n#include <time.h>\n#include <sys/timeb.h>\n#include <vector>\n\n#include \"satf.h\"\n#include \"satf_math.h\"\n\nbool log_undefined_values = true;\n\n// TODO 1: Extend the transformation algorithm to include the possibility of stating that coefficient a\n//         should not be smaller than another coefficient (b), or a should not be smaller than -1*b, etc. Without such\n//         an option, we can end up with negative invrates, which is undesirable.\n\n#define debug_level 10\n\n_dbg_class_set(CCoefConstraints, \"CCoefConstraints\", 10);\n_dbg_class_set(CCoefs, \"CCoefs\", 10);\n_dbg_class_set(CDataPoint, \"CDataPoint\", 10);\n_dbg_class_set(CDesignMatrixRow, \"CDesignMatrixRow\", 10);\n_dbg_class_set(CDataContainer, \"CDataContainer\", 10);\n\n\nint getMilliCount(){\n  timeb tb;\n\tftime(&tb);\n\tint nCount = tb.millitm + (tb.time & 0xfffff) * 1000;\n\treturn nCount;\n}\n\nint getMilliSpan(int nTimeStart){\n\tint nSpan = getMilliCount() - nTimeStart;\n\tif(nSpan < 0)\n\t\tnSpan += 0x100000 * 1000;\n\treturn nSpan;\n}\n/*\ninline bool valid_dprime(double dprime, DoubleVector& LLVector, bool by_row) {\n    if( isnan(dprime) ) {\n        if(log_undefined_values)\n          printf(\"SATF WARNING: dprime is undefined.\\n\");\n        save_LL(LLVector, R_NaN, by_row);\n        return false;\n    }\n    return true;\n}\n*/\n",
    "created" : 1385773220999.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "955353334",
    "id" : "1A25A0AE",
    "lastKnownWriteTime" : 1389634941,
    "path" : "~/CodeSATF/src/satf.cpp",
    "project_path" : "src/satf.cpp",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "cpp"
}